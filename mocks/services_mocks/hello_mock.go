// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/hello/interface.go

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/split-notes/pennant-flagger/db/models"
	reflect "reflect"
)

// Mock_hello is a mock of Service interface
type Mock_hello struct {
	ctrl     *gomock.Controller
	recorder *Mock_helloMockRecorder
}

// Mock_helloMockRecorder is the mock recorder for Mock_hello
type Mock_helloMockRecorder struct {
	mock *Mock_hello
}

// NewMock_hello creates a new mock instance
func NewMock_hello(ctrl *gomock.Controller) *Mock_hello {
	mock := &Mock_hello{ctrl: ctrl}
	mock.recorder = &Mock_helloMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mock_hello) EXPECT() *Mock_helloMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *Mock_hello) Create(greetingModel models.Greetings) (*models.Greetings, error) {
	ret := m.ctrl.Call(m, "Create", greetingModel)
	ret0, _ := ret[0].(*models.Greetings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *Mock_helloMockRecorder) Create(greetingModel interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mock_hello)(nil).Create), greetingModel)
}

// Get mocks base method
func (m *Mock_hello) Get() ([]models.Greetings, error) {
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.Greetings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *Mock_helloMockRecorder) Get() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mock_hello)(nil).Get))
}
